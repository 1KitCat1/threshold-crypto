from math import gcd
from .threshold_crypto import number

def get_coprimes(number):
    co_primes = []

    for i in range(1, number + 1):
        if gcd(number, i) == 1:
            co_primes.extend([i])
    co_primes.pop(0)
    return co_primes


def calculate_subgroups(modulus, order):
    # All cyclic groups have the trivial subgroup [1]
    subgroups = {}
    co_primes = get_coprimes(modulus)

    for i in range(1, len(co_primes)):
        # Subgroups of cyclic groups always contain 1
        potential_subgroup = [1]

        exponent = 1
        coprime_potency = pow(co_primes[i], exponent, modulus)
        while coprime_potency != 1:
            potential_subgroup.extend([coprime_potency])
            exponent += 1
            coprime_potency = pow(co_primes[i], exponent, modulus)

        potential_subgroup = sorted(potential_subgroup)

        # Ueberpruefe, ob die Ordnung der Subgruppe mit der Primzahl q uebereinstimmt
        if potential_subgroup not in sorted(subgroups):
            if (len(potential_subgroup) == order) and (co_primes[i] != 2):
                subgroups[co_primes[i]] = potential_subgroup

    return subgroups


def generate_Zq(g, q, p):
    group = []
    counter = 0
    while not counter == p:
        a = pow(g,counter,p)
        counter += 1
        group.append(a)
    group.sort()
    return group

#print(generate_Zq(17906435243842862345453835552815243404911647137073134463025160688995967488398983883106245967559373149795748443813049871354204770601174285653863536485679014760802852938205445698233430999295273593565745966645968651501470796614660949221379136782521156980440939610488754701132825226698633081421678693978649121584859440571365037320084373304699863718759566935084604920447588793835852015570107152381880424069367528899745747855775959412017686801090474997082475612446031206581849434853823922623275250452328283036003031659299664036862958862229602762586321240949493048947451750791435815161649573142989093624189059486316195524206,
#                  10618467431109255826811723682355405742548731929816156091747235160932718842191868618547559021891315476831775712322174838172025868823287954017614722709485175289999104232085611367632251097970543971956330133939680188300264510953071987567773565545271736632068108827231022580221562347276143953377011698365768181817228532426359026232681564821743180156509982170730187053472140175246614150270926627094486697162137763059704541075953167729462901540845980813631436454772455625469713279834820590870709396325194810697622095691840045063076227665564075811289939652564052756797331573239977645017386190572092778011730104718173985861611,
#                  21236934862218511653623447364710811485097463859632312183494470321865437684383737237095118043782630953663551424644349676344051737646575908035229445418970350579998208464171222735264502195941087943912660267879360376600529021906143975135547131090543473264136217654462045160443124694552287906754023396731536363634457064852718052465363129643486360313019964341460374106944280350493228300541853254188973394324275526119409082151906335458925803081691961627262872909544911250939426559669641181741418792650389621395244191383680090126152455331128151622579879305128105513594663146479955290034772381144185556023460209436347971723223))
#print(generate_Zq(6, 11, 23))


print(number.PolynomMod.create_random_polynom(7, 4,11))